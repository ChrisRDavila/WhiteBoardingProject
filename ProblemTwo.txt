Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi", 7, 53]

Output: [7, 9, "hi", 12, 53]

solved without filter() or recursion:

function removeDuplicates(input) {
  let unique = [];
  input.forEach(element => {
    if(!unique.includes(element)) {
      unique.push(element)
    }
  })
  return unique;
}

psuedo code/ explanation:
create empty array named Unique`
loop through each index of input array and look for indices that dont match the index currenty looping
if there is not a match, push the element onto empty unique array and return value 

using filter 

function removeDuplicates(inputArray) {
    return inputArray.filter((item,
        index) => inputArray.indexOf(item) === index);
}

removeDuplicates(inputArray);

using recursion

function removeDuplicatesRec(input, index = 0, result = []) {
  if (input.length === index) {
    return result;
  }
  if (result.indexOf(input[i] === -1))
}





function replaceSpacesRecursive(input, index = 0) {
  if (index === input.length) {
    return '';
  }

  if (input[index] === ' ') {
    return '%20' + replaceSpacesRecursive(input, index + 1);
  } else {
    return input[index] + replaceSpacesRecursive(input, index + 1);
  }
}

function removeDuplicates(input) {
  let unique = [];
  input.forEach(element => {
    if(!unique.includes(element)) {
      unique.push(element)
    }
  })
  return unique;
}

function removeDuplicates(input, index = 0) {
  if (index === input.length) {
    return input;
  }
  let unique = [];
  if (!unique.includes(input[index])) {
    return unique.push(input[index]) + removeDuplicates(input, index + 1);
  } else {
    return input[index] + removeDuplicates(input, index + 1);
  }
}