Question #1: Turning Strings to URLs
URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.

Example
Input: "Jasmine Ann Jones"

Output: "Jasmine%20Ann%20Jones"

Solution 1: Without recursion

const StringToUrlOne = function(input) {
  wordArray = input.split(' ');
  urlArray = [];
  for(let i=0; i < wordArray.length; i++){
    let words = wordArray[i].concat('%20');
    urlArray.push(words);
  }
  let joinedString = urlArray.join('');
  return joinedString;

}

psuedo/explained: create an array of words in string split at the spaces
create an empty array that will be populated with new words that replace spaces with '%20'
loop thru split words array and create variable for each word that concatinates '%20' on to end of the word
push concatinated words onto empty url Array
create a final string that joins the newly created words from url Array and return that value

recursive 1
 
 function stringToUrlTwo(str) { 
    if (str.length === 0) { 
        return ''; 
    } 
    if (str[0] === ' ') { 
        return '%20' + stringToUrlTwo(str.slice(1)); 
    } 
    return str[0] + stringToUrlTwo(str.slice(1)); 
} 
  
let inputStr = "Jasmine Ann Jones"
let outputStr = stringToUrlTwo(inputStr); 


function replaceSpacesRecursive(input, index = 0) {
  if (index === input.length) {
    return '';
  }

  if (input[index] === ' ') {
    return '%20' + replaceSpacesRecursive(input, index + 1);
  } else {
    return input[index] + replaceSpacesRecursive(input, index + 1);
  }
}



set up a function with parameter that takes input and index with index set to 0.  set up a termination case for if index is equal to input.length to break recursion loop.  create a branch of logic that will return the replacement characters if the element at index is a ' ' and call the function itslef recursievley with index + 1 to increment along index,  
another logic branch for remaining logic that will return the rest of the characters as they are input and increment along index
