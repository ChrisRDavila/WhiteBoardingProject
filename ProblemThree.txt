Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

w/out recursion

function stringCompression (str) {
  let output = '';
  let count = 0;
  for (let i = 0; i < str.length; i++) {
count++;
    if (str[i] != str[i+1]) {
      output +=  count + str[i];
      count = 0;
    }
} let fixOutput = output.replaceAll('1','')
  return fixOutput;
}

psuedoCode/ explanation :
create var for output string and count;
loop thru input increment count by all characters in string
if value of input at index [i] on loop is different then the index after
replace that index with the count up to that point and the character at that index and 
reset count to 0
to match output required, replaceAll was used to remove indices that have a count of 1, 
and replace with just the value of the index ie ('a') instead of ('1a)